#!/usr/bin/env python3

# marvin-ctl - Control the Marvin bot running at testbot.winehq.org
# Copyright (C) 2021 Giovanni Mascellani for CodeWeavers
# Copyright (C) 2022 RÃ©mi Bernon for CodeWeavers

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see
# <http://www.gnu.org/licenses/>.

"""
Usage:
  marvin-ctl [options] login <username>
  marvin-ctl [options] deb <patch> [<cmdline>...]
  marvin-ctl [options] win <patch> [<cmdline>...]
  marvin-ctl [options] all <patch> [<cmdline>...]

Commands:
  login <username>            Login to Marvin
  deb <patch> [<cmdline>...]  Run tests on Debian
  win <patch> [<cmdline>...]  Run tests on Windows
  all <patch> [<cmdline>...]  Run tests on Debian and Windows

Options:
  -V, --vms <vm>[,<vm>...]  Explicit VM list
  -l, --lang                Run on localized VMs
  -e, --extra               Run on extra VMs
  -d, --driver              Run on test signed driver VMs
  --32                      Choose 32 bit Windows only
  --64                      Choose 64 bit Windows only
  -1, --one                 Choose just one Windows VM
  -D, --dry-run             Dry run (just print the list of VMs and jobs)
"""

import collections
import subprocess
import requests
import getpass
import docopt
import pickle
import sys
import os

VMS = {
  'debian11':         { 'type': 'deb',   'default': True,  'driver': True,  'locale': True  },
  'debiant':          { 'type': 'deb',   'default': False, 'driver': True,  'locale': True  },
  'debiant2':         { 'type': 'deb',   'default': False, 'driver': True,  'locale': True  },

  'w1064_tsign':      { 'type': 'win64', 'default': True,  'driver': True,  'locale': False },
  'w1064':            { 'type': 'win64', 'default': True,  'driver': False, 'locale': False },
  'w1064_2qxl':       { 'type': 'win64', 'default': True,  'driver': False, 'locale': False },
  'w1064v1507':       { 'type': 'win64', 'default': True,  'driver': False, 'locale': False },
  'w1064v1809':       { 'type': 'win64', 'default': True,  'driver': False, 'locale': False },
  'w10pro64':         { 'type': 'win64', 'default': True,  'driver': False, 'locale': False },
  'w864':             { 'type': 'win64', 'default': True,  'driver': False, 'locale': False },
  'w10pro64_ar':      { 'type': 'win64', 'default': True,  'driver': False, 'locale': True  },
  'w10pro64_he':      { 'type': 'win64', 'default': True,  'driver': False, 'locale': True  },
  'w10pro64_ja':      { 'type': 'win64', 'default': True,  'driver': False, 'locale': True  },
  'w10pro64_zh_CN':   { 'type': 'win64', 'default': True,  'driver': False, 'locale': True  },
  'w1064_1qxl':       { 'type': 'win64', 'default': False, 'driver': False, 'locale': False },
  'w1064_adm':        { 'type': 'win64', 'default': False, 'driver': False, 'locale': False },
  'w1064v1607':       { 'type': 'win64', 'default': False, 'driver': False, 'locale': False },
  'w1064v1709':       { 'type': 'win64', 'default': False, 'driver': False, 'locale': False },
  'w1064v1909':       { 'type': 'win64', 'default': False, 'driver': False, 'locale': False },
  'w10pro64_de':      { 'type': 'win64', 'default': False, 'driver': False, 'locale': True  },
  'w10pro64_fr':      { 'type': 'win64', 'default': False, 'driver': False, 'locale': True  },
  'w10pro64_hi':      { 'type': 'win64', 'default': False, 'driver': False, 'locale': True  },
  'w10pro64_ko':      { 'type': 'win64', 'default': False, 'driver': False, 'locale': True  },
  'w10pro64_pt_BR':   { 'type': 'win64', 'default': False, 'driver': False, 'locale': True  },
  'w10pro64_pt_PT':   { 'type': 'win64', 'default': False, 'driver': False, 'locale': True  },
  'w10pro64_ru':      { 'type': 'win64', 'default': False, 'driver': False, 'locale': True  },
  'w10pro64v2004':    { 'type': 'win64', 'default': False, 'driver': False, 'locale': False },
  'w2008s64':         { 'type': 'win64', 'default': False, 'driver': False, 'locale': False },
  'w7pro64':          { 'type': 'win64', 'default': False, 'driver': False, 'locale': False },
  'wvistau64':        { 'type': 'win64', 'default': False, 'driver': False, 'locale': False },

  'w7u_2qxl':         { 'type': 'win32', 'default': True,  'driver': True,  'locale': False },
  'w8':               { 'type': 'win32', 'default': True,  'driver': True,  'locale': False },
  'w7u_adm':          { 'type': 'win32', 'default': True,  'driver': False, 'locale': False },
  'w8adm':            { 'type': 'win32', 'default': True,  'driver': False, 'locale': False },
  'w7u_el':           { 'type': 'win32', 'default': True,  'driver': False, 'locale': True  },
  'w2000pro':         { 'type': 'win32', 'default': False, 'driver': False, 'locale': False },
  'w2003std':         { 'type': 'win32', 'default': False, 'driver': False, 'locale': False },
  'w7u':              { 'type': 'win32', 'default': False, 'driver': False, 'locale': False },
  'w7u_1qxl':         { 'type': 'win32', 'default': False, 'driver': False, 'locale': False },
  'w7u_de':           { 'type': 'win32', 'default': False, 'driver': False, 'locale': True  },
  'w7u_es':           { 'type': 'win32', 'default': False, 'driver': False, 'locale': True  },
  'w7u_pt_PT':        { 'type': 'win32', 'default': False, 'driver': False, 'locale': True  },
  'wvista':           { 'type': 'win32', 'default': False, 'driver': False, 'locale': False },
  'wvistaadm':        { 'type': 'win32', 'default': False, 'driver': False, 'locale': False },
  'wxppro':           { 'type': 'win32', 'default': False, 'driver': False, 'locale': False },
  'wxppro_2scr':      { 'type': 'win32', 'default': False, 'driver': False, 'locale': False },
}

def run(args, session):
    data = {
        'Page': '4',
        'Branch': 'master',
        'ShowAll': '1',
        'UserVMSelection': '1',
        'Remarks': '',
        'Run32': 'on',
        'Run64': 'on',
        'DebugLevel': '1',
        'Action': 'Submit',
    }
    files = {'Upload': open(args['<patch>'], 'rb')}

    if args['<patch>'].endswith('.exe') and not args['64']:
        output = subprocess.check_output(['file', args['<patch>']],
                                         encoding='utf-8')
        args['64'] = 'PE32+' in output

    if args['<patch>'].endswith('.exe'):
        data['TestExecutable'] = os.path.basename(args['<patch>'])
        data['CmdLineArg'] = ' '.join(args['<cmdline>'])
        data['NoCmdLineArgWarn'] = '1'
    else:
        assert len(args['<cmdline>']) > 0
        data['CmdLineArg'] = ' '.join(args['<cmdline>'])
        with open(args['<patch>'], 'r') as src:
            for line in [l for l in src if 'diff --git' in l and
                         'dlls' in l and 'tests' in l]:
                split = line.strip().split("/")
                data['TestExecutable'] = f'{split[2]}_test.exe'

    if args['vms'] is None: vms = {k: v for k, v in VMS.items()}
    else: vms = {k: v for k, v in VMS.items() if k in args['vms'].split(',')}
    vms = {k: v for k, v in vms.items() if args['all'] or args[v['type'][:3]]}
    vms = {k: v for k, v in vms.items() if v['default'] or args['extra']}
    vms = {k: v for k, v in vms.items() if not v['locale'] or args['lang']}
    if args['driver']: vms = {k: v for k, v in vms.items() if v['driver']}
    if args['32']: vms = {k: v for k, v in vms.items() if v['type'] != 'win64'}
    if args['64']: vms = {k: v for k, v in vms.items() if v['type'] != 'win32'}

    print(f"Running {data['TestExecutable']}, {data['CmdLineArg']} on {' '.join(vms.keys())}")

    for k, v in vms.items():
        if v['type'] == 'deb':
            if not args['64']:
                data[f'win32_{k}'] = 'on'
                data[f'win32_{k}_lang'] = 'en_US'
                data[f'wow32_{k}'] = 'on'
                data[f'wow32_{k}_lang'] = 'en_US'
            if not args['32']:
                data[f'wow64_{k}'] = 'on'
                data[f'wow64_{k}_lang'] = 'en_US'
        else:
            data[f'vm_{k}'] = 'on'

    rep = session.post('https://testbot.winehq.org/Submit.pl',
                       data=data, files=files, allow_redirects=False)
    rep.raise_for_status()
    print(rep.headers['Location'])

def login(args, session):
    data = {'Name': args['<username>'], 'Password': getpass.getpass(), 'Action': 'Log in'}
    rep = session.post('https://testbot.winehq.org/Login.pl', data=data)
    rep.raise_for_status()
    with open(os.path.expanduser('~/.cache/marvinctl'), 'wb') as cookies:
        pickle.dump(session.cookies, cookies)

def main():
    args = docopt.docopt(__doc__, version='marvin-ctl v1.0.0')
    args = dict(((k if '--' not in k else k.strip('-').replace('-', '_'),v)
               for k,v in args.items()))

    session = requests.Session()
    if args['login']:
        login(args, session)
    else:
        with open(os.path.expanduser('~/.cache/marvinctl'), 'rb') as cookies:
            session.cookies.update(pickle.load(cookies))
        run(args, session)

if __name__ == '__main__':
    main()
